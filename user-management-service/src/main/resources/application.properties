server.port=8081
server.servlet.context-path=/user
spring.application.name=user-management-service
# datasource
# directly from bash (no need to connect to the container)
# psql -U user -h localhost user_management_database
# \d -> to list tables
# select * from users; -> to select all users
spring.datasource.url=jdbc:postgresql://localhost/user_management_database
spring.datasource.username=user
spring.datasource.password=secret
# oauth2
spring.security.oauth2.authorizationserver.client.student-service.registration.client-id=student-service
spring.security.oauth2.authorizationserver.client.student-service.registration.client-secret={bcrypt}$2a$10$wBQsD226382JwORYoAUgVOZoFemGTNwuA/UJOP3.eUBnFxz.Ulf4i
spring.security.oauth2.authorizationserver.client.student-service.registration.client-authentication-methods=client_secret_basic
spring.security.oauth2.authorizationserver.client.student-service.registration.authorization-grant-types=client_credentials,authorization_code,refresh_token
spring.security.oauth2.authorizationserver.client.student-service.registration.redirect-uris=http://127.0.0.1:8080/user/login/oauth2/code/api-gateway
spring.security.oauth2.authorizationserver.client.student-service.registration.scopes=openid,student.write,student.read
spring.security.oauth2.authorizationserver.client.student-service.require-authorization-consent=true
# springdoc
springdoc.show-actuator=true
springdoc.enable-spring-security=true
springdoc.show-login-endpoint=true
springdoc.show-oauth2-endpoints=true